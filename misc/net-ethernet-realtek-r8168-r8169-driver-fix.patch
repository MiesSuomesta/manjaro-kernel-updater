diff --git a/drivers/net/ethernet/realtek/r8169_main.c b/drivers/net/ethernet/realtek/r8169_main.c
index dad84ecf5a77..2a85c22632aa 100644
--- a/drivers/net/ethernet/realtek/r8169_main.c
+++ b/drivers/net/ethernet/realtek/r8169_main.c
@@ -5107,15 +5107,19 @@ static int r8169_mdio_register(struct rtl8169_private *tp)
 	tp->phydev = mdiobus_get_phy(new_bus, 0);
 	if (!tp->phydev) {
 		return -ENODEV;
-	} else if (!tp->phydev->drv) {
-		/* Most chip versions fail with the genphy driver.
-		 * Therefore ensure that the dedicated PHY driver is loaded.
-		 */
-		dev_err(&pdev->dev, "no dedicated PHY driver found for PHY ID 0x%08x, maybe realtek.ko needs to be added to initramfs?\n",
-			tp->phydev->phy_id);
-		return -EUNATCH;
-	}
-
+       } else {
+               dev_info(&pdev->dev, "PHY version: 0x%x\n", tp->phydev->phy_id);
+               dev_info(&pdev->dev, "MAC version: %d\n", tp->mac_version);
+
+               if (tp->mac_version == RTL_GIGA_MAC_NONE) {
+                       /* Most chip versions fail with the genphy driver.
+                        * Therefore ensure that the dedicated PHY driver is loaded.
+                        */
+                       dev_err(&pdev->dev, "Not known MAC/PHY version.\n");
+                       mdiobus_unregister(new_bus);
+                       return -EUNATCH;
+               }
+ 	}
 	/* PHY will be woken up in rtl_open() */
 	phy_suspend(tp->phydev);
 
diff --git a/drivers/net/phy/phy-core.c b/drivers/net/phy/phy-core.c
index 46bd68e9ecfa..eb903e81c3bb 100644
--- a/drivers/net/phy/phy-core.c
+++ b/drivers/net/phy/phy-core.c
@@ -151,6 +151,18 @@ static const struct phy_setting settings[] = {
 };
 #undef PHY_SETTING
 
+#define PHY_NOT_ATTACHED_CHECK \
+       { \
+               void *attached_dev_ptr = (phydev) ? phydev->attached_dev : NULL; \
+               if (! ( \
+                       (attached_dev_ptr) && \
+                       (phydev->state >= PHY_READY) \
+                      ) \
+                  ) \
+                       return -EOPNOTSUPP; \
+       };
+
+
 /**
  * phy_lookup_setting - lookup a PHY setting
  * @speed: speed to match
@@ -456,6 +468,9 @@ int phy_read_mmd(struct phy_device *phydev, int devad, u32 regnum)
 {
 	int ret;
 
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
 	phy_lock_mdio_bus(phydev);
 	ret = __phy_read_mmd(phydev, devad, regnum);
 	phy_unlock_mdio_bus(phydev);
@@ -478,6 +493,9 @@ int __phy_write_mmd(struct phy_device *phydev, int devad, u32 regnum, u16 val)
 {
 	int ret;
 
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
 	if (regnum > (u16)~0 || devad > 32)
 		return -EINVAL;
 
@@ -515,6 +533,9 @@ int phy_write_mmd(struct phy_device *phydev, int devad, u32 regnum, u16 val)
 {
 	int ret;
 
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
 	phy_lock_mdio_bus(phydev);
 	ret = __phy_write_mmd(phydev, devad, regnum, val);
 	phy_unlock_mdio_bus(phydev);
@@ -540,6 +561,9 @@ int phy_modify_changed(struct phy_device *phydev, u32 regnum, u16 mask, u16 set)
 {
 	int ret;
 
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
 	phy_lock_mdio_bus(phydev);
 	ret = __phy_modify_changed(phydev, regnum, mask, set);
 	phy_unlock_mdio_bus(phydev);
@@ -563,6 +587,9 @@ int __phy_modify(struct phy_device *phydev, u32 regnum, u16 mask, u16 set)
 {
 	int ret;
 
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
 	ret = __phy_modify_changed(phydev, regnum, mask, set);
 
 	return ret < 0 ? ret : 0;
@@ -584,6 +611,9 @@ int phy_modify(struct phy_device *phydev, u32 regnum, u16 mask, u16 set)
 {
 	int ret;
 
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
 	phy_lock_mdio_bus(phydev);
 	ret = __phy_modify(phydev, regnum, mask, set);
 	phy_unlock_mdio_bus(phydev);
@@ -610,6 +640,9 @@ int __phy_modify_mmd_changed(struct phy_device *phydev, int devad, u32 regnum,
 {
 	int new, ret;
 
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
 	ret = __phy_read_mmd(phydev, devad, regnum);
 	if (ret < 0)
 		return ret;
@@ -643,6 +676,9 @@ int phy_modify_mmd_changed(struct phy_device *phydev, int devad, u32 regnum,
 {
 	int ret;
 
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
 	phy_lock_mdio_bus(phydev);
 	ret = __phy_modify_mmd_changed(phydev, devad, regnum, mask, set);
 	phy_unlock_mdio_bus(phydev);
@@ -668,6 +704,9 @@ int __phy_modify_mmd(struct phy_device *phydev, int devad, u32 regnum,
 {
 	int ret;
 
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
 	ret = __phy_modify_mmd_changed(phydev, devad, regnum, mask, set);
 
 	return ret < 0 ? ret : 0;
@@ -691,6 +730,9 @@ int phy_modify_mmd(struct phy_device *phydev, int devad, u32 regnum,
 {
 	int ret;
 
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
 	phy_lock_mdio_bus(phydev);
 	ret = __phy_modify_mmd(phydev, devad, regnum, mask, set);
 	phy_unlock_mdio_bus(phydev);
@@ -701,6 +743,10 @@ EXPORT_SYMBOL_GPL(phy_modify_mmd);
 
 static int __phy_read_page(struct phy_device *phydev)
 {
+
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
 	if (WARN_ONCE(!phydev->drv->read_page, "read_page callback not available, PHY driver not loaded?\n"))
 		return -EOPNOTSUPP;
 
@@ -709,6 +755,10 @@ static int __phy_read_page(struct phy_device *phydev)
 
 static int __phy_write_page(struct phy_device *phydev, int page)
 {
+
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
 	if (WARN_ONCE(!phydev->drv->write_page, "write_page callback not available, PHY driver not loaded?\n"))
 		return -EOPNOTSUPP;
 
@@ -725,6 +775,10 @@ static int __phy_write_page(struct phy_device *phydev, int page)
  */
 int phy_save_page(struct phy_device *phydev)
 {
+
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
 	phy_lock_mdio_bus(phydev);
 	return __phy_read_page(phydev);
 }
@@ -745,6 +799,9 @@ int phy_select_page(struct phy_device *phydev, int page)
 {
 	int ret, oldpage;
 
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
 	oldpage = ret = phy_save_page(phydev);
 	if (ret < 0)
 		return ret;
@@ -779,6 +836,9 @@ int phy_restore_page(struct phy_device *phydev, int oldpage, int ret)
 {
 	int r;
 
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
 	if (oldpage >= 0) {
 		r = __phy_write_page(phydev, oldpage);
 
@@ -810,6 +870,9 @@ int phy_read_paged(struct phy_device *phydev, int page, u32 regnum)
 {
 	int ret = 0, oldpage;
 
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
 	oldpage = phy_select_page(phydev, page);
 	if (oldpage >= 0)
 		ret = __phy_read(phydev, regnum);
@@ -831,6 +894,9 @@ int phy_write_paged(struct phy_device *phydev, int page, u32 regnum, u16 val)
 {
 	int ret = 0, oldpage;
 
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
 	oldpage = phy_select_page(phydev, page);
 	if (oldpage >= 0)
 		ret = __phy_write(phydev, regnum, val);
@@ -854,6 +920,9 @@ int phy_modify_paged_changed(struct phy_device *phydev, int page, u32 regnum,
 {
 	int ret = 0, oldpage;
 
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
 	oldpage = phy_select_page(phydev, page);
 	if (oldpage >= 0)
 		ret = __phy_modify_changed(phydev, regnum, mask, set);
@@ -875,7 +944,12 @@ EXPORT_SYMBOL(phy_modify_paged_changed);
 int phy_modify_paged(struct phy_device *phydev, int page, u32 regnum,
 		     u16 mask, u16 set)
 {
-	int ret = phy_modify_paged_changed(phydev, page, regnum, mask, set);
+	int ret;
+
+	/* If phy not attached, do nothing */
+	PHY_NOT_ATTACHED_CHECK
+
+	ret = phy_modify_paged_changed(phydev, page, regnum, mask, set);
 
 	return ret < 0 ? ret : 0;
 }
diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index 04946de74fa0..b610ac7c22ad 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -1350,8 +1350,6 @@ int phy_attach_direct(struct net_device *dev, struct phy_device *phydev,
 
 	phydev->interface = interface;
 
-	phydev->state = PHY_READY;
-
 	/* Initial carrier state is off as the phy is about to be
 	 * (re)initialized.
 	 */
@@ -1369,6 +1367,8 @@ int phy_attach_direct(struct net_device *dev, struct phy_device *phydev,
 	phy_resume(phydev);
 	phy_led_triggers_register(phydev);
 
+	phydev->state = PHY_READY;
+
 	return err;
 
 error:
